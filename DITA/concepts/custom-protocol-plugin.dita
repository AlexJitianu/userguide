<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="custom-protocol-plugin">
  <title>Custom Protocol Plugin</title>
  <shortdesc>This type of plugins allows the
    developer to work with a custom designed protocol for retrieving and storing files.</shortdesc>
  <prolog>
    <metadata>
      <keywords><indexterm>Extend Oxygen with Plugins<indexterm>implement plugin<indexterm>custom protocol
              plugin</indexterm></indexterm></indexterm></keywords>
    </metadata>
  </prolog>
  <conbody>
    <p> It provides the following API:</p>
    <ul>
      <li>The interface <apiname>URLStreamHandlerPluginExtension</apiname> - There is one method
        that must be implemented:<ul>
          <li><apiname>getURLStreamHandler(String protocol)</apiname> - It takes as an argument the
            name of the protocol and returns a <codeph>URLStreamHandler</codeph> object, or null if
            there is no URL handler for the specified protocol.</li>
        </ul></li>
      <li>With the help of the <apiname>URLChooserPluginExtension2</apiname> interface, it is
        possible to write your own dialog that works with the custom protocol. This interface
        provides two methods: <ul>
          <li><apiname>chooseURLs(StandalonePluginWorkspace workspaceAccess)</apiname> - Returns a
              <codeph>URL[]</codeph> object that contains the URLs the user decided to open with the
            custom protocol. You can invoke your own URL chooser dialog here and then return the
            chosen URLs having your own custom protocol. You have access to the workspace of <ph><ph
                keyref="product"
            /></ph>.</li>
          <li><apiname>getMenuName()</apiname> - Returns a <codeph>String</codeph> object that is
            the name of the entry added in the <menucascade>
              <uicontrol>File</uicontrol>
            </menucascade> menu.</li>
        </ul></li>
      <li>With the help of the <apiname>URLChooserToolbarExtension</apiname> interface, it is
        possible to provide a toolbar entry which is used for launching the custom URLs chooser from
        the <apiname>URLChooserPluginExtension</apiname> implementation. This interface provides two
        methods: <ul>
          <li><apiname>getToolbarIcon()</apiname> - Returns the <codeph>javax.swing.Icon</codeph>
            image used on the toolbar.</li>
          <li><apiname>getToolbarTooltip()</apiname> - Returns a <codeph>String</codeph> that is the
            tooltip used on the toolbar button.</li>
        </ul></li>
    </ul>
  </conbody>
</concept>