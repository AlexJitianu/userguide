<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="validation-scenario">
  <title>Validation Scenario</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Editing XML Documents<indexterm>validation against a schema<indexterm>validation
              scenario</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <p>A complex XML document is split in smaller interrelated modules. These modules do not make
      much sense individually and cannot be validated in isolation due to interdependencies with
      other modules. <ph keyref="product"/> validates the main module of the document when an
      imported module is checked for errors.</p>
    <p>A typical example is the chunking DocBook XSL stylesheet which has
        <filepath>chunk.xsl</filepath> as the main module and <filepath>param.xsl</filepath>,
        <filepath>chunk-common.xsl</filepath>, and <filepath>chunk-code.xsl</filepath> as imported
      modules. <filepath>param.xsl</filepath> only defines XSLT parameters. The module
        <filepath>chunk-common.xsl</filepath> defines an XSLT template with the name
        <codeph>chunk</codeph>. <filepath>Chunk-code.xsl</filepath> calls this template. The
      parameters defined in <filepath>param.xsl</filepath> are used in the other modules without
      being redefined.</p>
    <p>Validating <filepath>chunk-code.xsl</filepath> as an individual XSLT stylesheet generates
      misleading errors referring to parameters and templates used but undefined. These errors are
      only caused by ignoring the context in which this module is used in real XSLT transformations
      and in which it is validated. To validate such a module, define a validation scenario to set
      the main module of the stylesheet and the validation engine used to find the errors. Usually
      this engine applies the transformation during the validation process to detect the errors that
      the transformation generates.</p>
    <p>You can validate a stylesheet with several engines to make sure that you can use it in
      different environments and have the same results. For example an XSLT stylesheet is applied
      with Saxon 6.5, Xalan and MSXML 4.0 in different production systems.</p>
    <p>Other examples of documents which can benefit of a validation scenario are:<ul>
        <li>A complex XQuery with a main module which imports modules developed independently but
          validated in the context of the main module of the query. In an XQuery validation scenario
          the default validator of <ph keyref="product"/> (Saxon 9) or any connection to a database
          that supports validation (Berkeley DB XML Database, eXist XML Database, <ph
            keyref="xhiveDB"/> XML Database,
          MarkLogic version 5 or newer) can be set as a validation engine.</li>
        <li>An XML document in which the master file includes smaller fragment files using XML
          entity references.</li>
      </ul><note>When you validate a document for which a master file is defined, <ph
          keyref="product"/> uses the scenarios defined in <xref
          href="../topics/defining_master_files.dita">the <uicontrol>Master Files</uicontrol>
          directory</xref>.</note></p>
    <p>To watch our video demonstration about how to use a validation scenario in <ph
        keyref="product"/>, go to <xref href="http://oxygenxml.com/demo/Validation_Scenario.html"
        format="html" scope="external"
      >http://oxygenxml.com/demo/Validation_Scenario.html</xref>.</p>
  </conbody>
</concept>
