<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/task.dtd">
<task id="create-validation-scenario">
  <title>How to Create a Validation Scenario</title>
  <taskbody>
    <context>Follow these steps for creating a validation scenario:</context>
    <steps>
      <step>
        <cmd>To open the <uicontrol>Configure Validation Scenario</uicontrol> dialog box, go to
            <menucascade product="editor author developer">
            <uicontrol>Document</uicontrol>
            <uicontrol>Validate</uicontrol>
            <uicontrol>Configure Validation Scenario</uicontrol>
          </menucascade>
          <menucascade product="editorEclipse authorEclipse developerEclipse">
            <uicontrol>XML</uicontrol>
          </menucascade>. You can also open this dialog from <ph product="editor author developer"
            >the <uicontrol>Validate</uicontrol> toolbar</ph><ph
            product="editorEclipse authorEclipse developerEclipse">the toolbar of the <ph
              keyref="product"/> plugin</ph>.</cmd>
        <stepresult>The following dialog is displayed. It contains the following types of scenarios:<ul>
            <li><b>Predefined</b> scenarios are organized in categories depending on the type of
              file they apply to. You can identify <uicontrol>Predefined</uicontrol> scenarios by a
              yellow key icon that marks them as <i>read-only</i>. If the predefined scenario is the
              default scenario of the framework, its name is written in bold font. If you try to
              edit one of these scenarios, <ph
                keyref="product"/> creates
              a customizable duplicate;</li>
            <li><b>User defined</b> scenarios are organized under a single category, but you can use
              the drop-down option box to filter them by the type of file they validate;<note>The
                default validation scenarios are not displayed in the scenarios list. If the current
                file has no associated scenarios, the preview area displays a message to let you
                know that you can apply the default validation. </note></li>
          </ul><fig id="figure-configure-validation-scenario-oxygen"
            product="editor author developer">
            <title>Configure Validation Scenario</title>
            <image href="../img/sa_validation_scenario_list_dialog.png"/>
          </fig><fig id="figure-configure-validation-scenario-oxygenEclipse"
            product="editorEclipse authorEclipse developerEclipse">
            <title>Configure Validation Scenario</title>
            <image href="../img/ec_validation_scenario_list_dialog.png"/>
          </fig></stepresult>
      </step>
      <step id="vs_1">
        <cmd>Press the <uicontrol>New</uicontrol> button to add a new scenario.</cmd>
      </step>
      <step id="vs_2">
        <cmd>Press the <uicontrol>Add</uicontrol> button to add a new validation unit with default
          settings. </cmd>
        <stepresult>The dialog that lists all validation units of the scenario is opened.<fig
            id="figure-edit-validation-scenario-oxygen" product="author developer editor">
            <title>Add / Edit a Validation Unit</title>
            <image href="../img/sa_edit_validation_scenario_dialog.png"/>
          </fig><fig id="figure-edit-validation-scenario-oxygenEclipse"
            product="editorEclipse authorEclipse developerEclipse">
            <title>Add / Edit a Validation Unit</title>
            <image href="../img/ec_edit_validation_scenario_dialog.png"/>
          </fig><p>The table holds the following information:</p><ul>
            <li><uicontrol>Storage</uicontrol> - allows you to create a scenario at project level,
              or as global;</li>
            <li><uicontrol>URL of the file to validate</uicontrol> - the URL of the main module
              which includes the current module. It is also the entry module of the validation
              process when the current one is validated;</li>
            <li><uicontrol>File type</uicontrol> - the type of the document validated in the current
              validation unit. <ph keyref="product"/> automatically selects the file type depending
              on the value of the <uicontrol>URL of the file to validate</uicontrol> field;</li>
            <li><uicontrol>Validation engine</uicontrol> - one of the engines available in <ph
                keyref="product"/> for validation of the type of document to which the current
              module belongs. <uicontrol>Default engine</uicontrol> is the default setting and means
              that the default engine executes the validation. This engine is set in
                <uicontrol>Preferences</uicontrol> pages for the type of the current document (XML
              document, XML Schema, XSLT stylesheet, XQuery file, and others) instead of a
              validation scenario;</li>
            <li><uicontrol>Automatic validation</uicontrol> - if this option is checked, then the
              validation operation defined by this row of the table is applied also by <xref
                href="../topics/automatic-validation.dita"
                product="author authorEclipse editor editorEclipse">the automatic validation
                feature.</xref> If the <uicontrol>Automatic validation</uicontrol> feature is <xref
                href="../topics/preferences-editor-document-checking.dita"
                product="author authorEclipse editor editorEclipse">disabled in Preferences</xref>
              then this option does not take effect as the Preference setting has higher
              priority;</li>
            <li><uicontrol>Schema</uicontrol> - the this option becomes active when you set the
                <uicontrol>File type</uicontrol> to <uicontrol>XML Document</uicontrol>;</li>
            <li><uicontrol>Settings</uicontrol> - opens the <uicontrol>Specify Schema</uicontrol>
              dialog box, allowing you to set a schema for validating XML documents, or a list of
              extensions for validating XSL or XQuery documents. You can also set a default phase
              for validation with a Schematron schema.</li>
          </ul></stepresult>
      </step>
      <step id="vd_3">
        <cmd>Edit the URL of the main validation module.</cmd>
        <info>
          <p>Specify the URL of the main module:<ul>
              <li>browsing for a local, remote, or archived file;</li>
              <li>using an <xref href="../topics/editor-variables.dita">editor variable</xref> or a
                  <xref href="../topics/custom-editor-variables.dita">custom editor variable</xref>,
                available in the following pop-up menu, opened after pressing the <image
                  href="../img/bt_editor_variables.png"/> button:<fig
                  product="author developer editor">
                  <title>Insert an Editor Variable</title>
                  <image href="../img/sa_editor_variables_menu.png"/>
                </fig><fig product="editorEclipse authorEclipse developerEclipse">
                  <title>Insert an Editor Variable</title>
                  <image href="../img/ec_editor_variables_menu.png"/>
                </fig></li>
            </ul></p>
        </info>
      </step>
      <step id="vs_4">
        <cmd>Select the type of the validated document.</cmd>
        <info>Note that it determines the list of possible validation engines.</info>
      </step>
      <step id="vs_5">
        <cmd>Select the validation engine.</cmd>
      </step>
      <step id="vs_6">
        <cmd>Select the <uicontrol>Automatic validation</uicontrol> option if you want to validate
          the current unit when <xref
            href="../topics/preferences-editor-document-checking.dita#preferences-editor-document-checking"
            product="author authorEclipse editor editorEclipse" format="dita">automatic validation
            feature is turned on in Preferences.</xref>
        </cmd>
      </step>
      <step id="vs_7">
        <cmd>Choose what schema is used during validation: the one detected after parsing the
          document or a custom one.</cmd>
      </step>
    </steps>
  </taskbody>
</task>
