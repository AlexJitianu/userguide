<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="webapp-plugin-prototyping">
  <title>How To Set-Up a Development Environment for <ph keyref="webappComponent"/> Plugins</title>
  <shortdesc>This procedure describes a development environment that can be used to increase your
    productivity in writing plugins for the <ph keyref="webappComponent"/>.</shortdesc>
  <taskbody>
    <prereq>You will need a recent Eclipse EE.</prereq>
    <context>Developing a plugin for the <ph keyref="webappComponent"/> might require repetitive
      coding-testing cycle. Since the <xref
        href="http://oxygenxml.com/oxygen_webapp_running_and_testing.html" format="html"
        scope="external">process of building a whole SDK project</xref> requires a full Maven build,
      the whole process might prove to be time consuming. The following procedure provide a faster
      alternative way of testing the plugin:</context>
    <steps>
      <step>
        <cmd>Setup an SDK sample project as described in <xref
            href="http://oxygenxml.com/oxygen_sdk_maven.html" format="html" scope="external">this
            tutorial</xref></cmd>
      </step>
      <step>
        <cmd id="create_plugin_project">Create a new plugin project as a submodule of the
            <filepath>oxygen-sample-plugins</filepath> module of the SDK or start from one of the
          existing sample plugins</cmd>
      </step>
      <step>
        <cmd>Follow <xref href="http://oxygenxml.com/oxygen_webapp_running_and_testing.html"
            format="html" scope="external">these instructions </xref> to run the <ph
            keyref="webappComponent"/> in a Tomcat server</cmd>
      </step>
      <step>
        <cmd>Look in the Tomcat logs or in the console for a line like <codeph>Loading plugins from:
            ${path}</codeph> and note the path of the plugins folder</cmd>
      </step>
      <step>
        <cmd>In the plugins folder create a sub-folder with a name of your choice, let's say
            <filepath>myplugin</filepath>.</cmd>
      </step>
      <step>
        <cmd>In the <filepath>myplugin</filepath> folder create a
            <filepath>plugin.redirect</filepath> file that contains the path to your plugin project
          created at step 2 on a single line.</cmd>
      </step>
      <step>
        <cmd>Import your plugin project in Eclipse.</cmd>
        <substeps id="substeps_vy1_gpb_2s">
          <substep>
            <cmd>Click <menucascade>
                <uicontrol>File</uicontrol>
                <uicontrol>Import</uicontrol>
              </menucascade></cmd>
          </substep>
          <substep>
            <cmd>Choose <uicontrol>Existing Maven Project</uicontrol></cmd>
          </substep>
          <substep>
            <cmd>Browse for the location of your plugin</cmd>
          </substep>
        </substeps>
      </step>
      <step>
        <cmd>Modify the <filepath>plugin.xml</filepath> to add a library reference to the directory
          where Eclipse places the compiled output.</cmd>
        <info>With the default setup of a Maven project, this step requires to add the following
          element:<pre>&lt;library name="target/classes/"/></pre></info>
      </step>
      <step>
        <cmd>You can now open a document in the <ph keyref="webappComponent"/> and it will
          automatically load your plugin.</cmd>
        <info>Every time you make changes to the plugin sources, you will need to restart the <ph
            keyref="webappComponent"/>.</info>
      </step>
    </steps>
    <postreq>Once you are happy with the result, you need to add the plugin back in your SDK project
      and follow <xref href="http://oxygenxml.com/oxygen_webapp_running_and_testing.html"
        format="html" scope="external">these instructions </xref> to perform a final testing of the
      project.</postreq>
  </taskbody>
  <related-links>
    <link href="../topics/webapp-configure-plugins.dita#webapp-configure-plugins"/>
  </related-links>
</task>
