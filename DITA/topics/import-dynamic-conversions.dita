<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="import-dynamic-conversions">
  <title>Import Content Dynamically</title>
  <body>
    <p>Along with the built-in support for various useful URL protocols (such as HTTP or FTP), <ph
        keyref="product"/> also provides special support for a <i>convert</i> protocol that can be
      used to chain predefined processors to import content from various sources dynamically.</p>
    <p>A dynamic conversion URL chains various processors that can be applied in sequence on a
      target resource and has the following general
      syntax:<codeblock>convert:/processor=xslt;ss=urn:processors:excel2d.xsl/processor=excel!/urn:files:sample.xls</codeblock></p>
    <p>The previous example first applies a processor called <codeph>excel</codeph> on a target
      identified by the identifier <filepath>urn:files:sample.xls</filepath> and converts the <tm
        tmtype="tm">Excel</tm> resource to XML. The second applied processor (<codeph>xslt</codeph>)
      applies an XSLT stylesheet identified using the identifier
        <filepath>urn:processors:excel2d.xsl</filepath> over the content resulting from the first
      applied processor. These identifiers are all mapped to real resources on disk via an <term>XML
        catalog</term> that is configured in the application, as in the following
      example:<codeblock outputclass="language-xml">&lt;catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
	&lt;rewriteURI uriStartString="urn:files:" rewritePrefix="./resources/"/>
	&lt;rewriteURI uriStartString="urn:processors:" rewritePrefix="./processors/"/>
&lt;/catalog></codeblock></p>
    <p>This type of URL can be opened in the application by using the <uicontrol>Open
        URL...</uicontrol> action from the <uicontrol>File</uicontrol> menu. It can also be
      referenced from existing XML resources via <i>xi:include</i> or from <term>DITA Maps</term> as
      topic references.</p>
    <p>A <i>GitHub</i> project that contains various dynamic conversion samples for producing DITA
      content from various sources (and then publishing it) can be found here: <xref
        href="https://github.com/oxygenxml/dita-glass" format="html" scope="external"/>.</p>
    <section>
      <title>Conversion Processors</title>
      <p>A set of predefined conversion processors is provided in <ph keyref="product"/> out-of-the
        box. Each processor has its own parameters that can be set to control the behavior of the
        conversion process. All parameters that are resolved to resources are passed through the XML
        catalog mapping.</p>
      <p>The following predefined conversion processors are included:<ul id="ul_r4y_5x2_mr">
          <li><b><codeph>xslt</codeph> Processor</b> - Converts an XML input using XSLT 2.0
            processing. The <codeph>ss</codeph> parameter indicates the stylesheet resource to be
            loaded. All other specified parameters will be set as parameters to the XSLT
            transformation.<codeblock>convert:/<b>processor=xslt;ss=urn:processors:convert.xsl;p1=v1</b>!/urn:files:sample.xml</codeblock></li>
          <li><b><codeph>xquery</codeph> Processor</b> - Converts an XML input using XQuery
            processing. The <codeph>ss</codeph> parameter indicates the XQuery script to be loaded.
            All other specified parameters will be set as parameters to the XSLT
            transformation.<codeblock>convert:/<b>processor=xquery;ss=urn:processors:convert.xquery;p1=v1</b>!/urn:files:sample.xml</codeblock></li>
          <li><b><codeph>excel</codeph> Processor</b> - Converts an <tm tmtype="tm">Excel</tm> input
            to an XML format that can be later converted by other piped processors. It has a single
            parameter <codeph>sn</codeph>, which indicates the name of the sheet that needs to be
            converted. If this parameter is missing, the XML will contain the combined content of
            all sheets included in the <tm tmtype="tm">Excel</tm> document.
            <codeblock>convert:/<b>processor=excel;sn=test</b>!/urn:files:sample.xls</codeblock></li>
          <li><b><codeph>java</codeph> Processor</b> - Converts an input to another format by
            applying a specific Java method. The <codeph>jars</codeph> parameter is a comma
            separated list of JAR libraries or folders, from which libraries will be loaded. The
              <codeph>ccn</codeph> parameter is the fully qualified name of the conversion class
            that will be instantiated. The conversion class needs to have a method with the
            following
            signature:<codeblock>  public void convert(String systemID, String originalSourceSystemID, InputStream is, 
OutputStream os, LinkedHashMap&lt;String, String> properties) throws IOException </codeblock><codeblock>convert:/<b>processor=java;jars=libs;ccn=test.JavaToXML</b>!/
urn:files:java/WSEditorBase.java</codeblock></li>
          <li><b><codeph>js</codeph> Processor</b> - Converts an input to another format by applying
            a JavaScript method. The <codeph>js</codeph> parameter indicates the script that will be
            used. The <codeph>fn</codeph> parameter is the name of the method that will be called
            from the script. The method must take a string as an argument and return a string. If
            any of the parameters are missing, an error is thrown and the conversion
            stops.<codeblock>convert:/<b>processor=js;js=urn:processors:md.js;fn=convertExternal</b>!/urn:files:sample.md</codeblock></li>
          <li><b><codeph>json</codeph> Processor</b> - Converts a JSON input to XML. It has no
            parameters.<codeblock>convert:/<b>processor=json</b>!/urn:files:personal.json</codeblock></li>
          <li><b><codeph>xhtml</codeph> Processor</b> - Converts HTML content to well-formed XHTML.
            It has no
            parameters.<codeblock>convert:/<b>processor=xhtml</b>!/urn:files:test.html</codeblock></li>
          <li><b><codeph>wrap</codeph> Processor</b> - Wraps content in a tag name making it
            well-formed XML. The <codeph>rn</codeph> parameter indicates the name of the root tag to
            use. By default, it is <codeph>wrapper</codeph>. The <codeph>encoding</codeph> parameter
            specifies the encoding that should be used to read the content. By default, it is
              <codeph>UTF8</codeph>. As an example, this processor can be used if you want to
            process a comma-separated values file with an XSLT stylesheet to produce XML content.
            The CSV file is first wrapped as well-formed XML, which is then processed with an
              <codeph>xslt</codeph>
            processor.<codeblock>convert:/<b>processor=wrap</b>!/urn:files:test.csv</codeblock></li>
        </ul></p>
    </section>
    <section>
      <title>Reverse Conversion Processors</title>
      <p>All processors defined above can also be used for saving content back to the target
        resource if they are defined in the URL as reverse processors. Reverse processors are
        evaluated right to left. These reverse processors allow <term>round-tripping</term> content
        to and from the target resource.</p>
      <p>As an example, the following URL converts HTML to DITA when the URL is opened using the
          <filepath>h2d.xsl</filepath> stylesheet and converts DITA to HTML when the content is
        saved in the application using the <filepath>d2h.xsl</filepath> stylesheet.</p>
      <p>
        <codeblock>convert:/processor=xslt;ss=h2d.xsl/rprocessor=xslt;ss=d2h.xsl!/urn:files:sample.html</codeblock>
      </p>
    </section>
  </body>
</topic>
