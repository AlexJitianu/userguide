<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="preferences-schema-aware">
  <title>Schema Aware Preferences</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Configure the Application<indexterm>Editor preferences<indexterm>schema
              aware</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>To configure the <uicontrol>Schema Aware</uicontrol> options, <ph
        conkeyref="reusable.menus/open-the-preferences-page"/> and go to <menucascade>
        <uicontrol>Editor</uicontrol>
        <uicontrol>Edit modes</uicontrol>
        <uicontrol>Author</uicontrol>
        <uicontrol>Schema aware</uicontrol>
      </menucascade>.</p>
    <ul>
      <li><uicontrol>Schema aware normalization, format, and indent</uicontrol>
        <p>When opening a document in Author mode, white spaces can be normalized or removed in
          order to obtain a more compact display. The reverse process takes place when saving the
          document in the Author mode. By default this algorithm is controlled by the
            <codeph>display</codeph> CSS property.</p><p>If this option is checked, then this
          process will be schema aware so the algorithm will take into account if the element is
          declared as <term>element-only</term> or <term>mixed</term>. It will also take into
          account the options <b>Preserve space elements</b>, <b>Default space elements</b>,
            <b>Mixed content elements</b>. To configure these options, <ph
            conkeyref="reusable.menus/open-the-preferences-page"/> and go to <menucascade>
            <uicontrol>Editor</uicontrol>
            <uicontrol>Format</uicontrol>
            <uicontrol>XML</uicontrol>
          </menucascade>. </p></li>
      <li><uicontrol>Indent blocks-only content</uicontrol>
        <p>If checked, even if an element is declared in the schema as being mixed but it has a
          blocks-only content (as specified by the CSS property <codeph>display</codeph> of its
          children), it will be treated as being element-only.</p></li>
      <li><uicontrol>Schema Aware Editing</uicontrol>
        <p>Editing in Author mode is schema driven.</p><ul>
          <li><uicontrol>On</uicontrol> - Enables all schema aware editing options.</li>
          <li><uicontrol>Off</uicontrol> - Disables all schema aware editing options. </li>
          <li><uicontrol>Custom</uicontrol> -<ul>
              <li><uicontrol>Delete element tags with backspace and delete</uicontrol><p>Controls
                  the behavior for deleting element tags using delete or backspace keys. Available
                  options: </p><ul>
                  <li><uicontrol>Smart delete</uicontrol>
                    <p>If the result of the delete action is invalid, different strategies will be
                      applied in order to keep the document valid. If backspace / delete is pressed
                      at the beginning / end of an element the action that should take place is
                      unwrap (the element will be deleted and its content will be put in its place).
                      If its content is not accepted by the schema in that position, you can keep a
                      valid document by applying different strategies like: <ul>
                        <li>Search for a preceding (backspace case)/following (delete case) element
                          in which you can append that content.</li>
                        <li>If the tag markers of the element to unwrap are not visible a caret move
                          action in the delete action direction will be performed.</li>
                      </ul></p></li>
                  <li><uicontrol>Reject action when its result is invalid</uicontrol>
                    <p>If checked and the result of the delete action is invalid, the action will
                      not be performed.</p></li>
                </ul></li>
              <li><uicontrol>Paste and Drag and Drop</uicontrol>
                <p>Controls the behavior for paste and drag and drop actions. Available options:</p><ul>
                  <li><ph id="smart_paste_and_drag_and_drop"><uicontrol>Smart paste and drag and
                        drop</uicontrol>
                    </ph><p id="smart_paste_explanation">If the content inserted by a paste or drop
                      action is not valid at the caret position, according to the schema, different
                      strategies are applied to find an appropriate insert position, like:<ul
                        id="ul_jfs_5pz_zd">
                        <li>If a sibling element can accept the content, then a new element with the
                          same name as the sibling is created in which the content will be
                          inserted.</li>
                        <li>An analysis will be performed to the left or to the right of the
                          insertion position, without leaving the current context, and try to insert
                          the fragment in one of the encountered elements (that accepts the content
                          to be inserted).</li>
                        <li>If one of the ancestors of the element at caret position accepts the
                          content, after the current offset or before it, then the paste operation
                          will be performed inside this ancestor.</li>
                      </ul></p></li>
                  <li><uicontrol>Reject action when its result is invalid</uicontrol>
                    <p>If checked and the result of the paste or drop action is invalid, the action
                      will not be performed. </p></li>
                </ul></li>
              <li><uicontrol>Typing</uicontrol>
                <p>Controls the behavior that takes place when typing. Available options:</p><ul>
                  <li><uicontrol>Smart typing</uicontrol>
                    <p>If the typed character cannot be inserted at element from the caret position
                      then a sibling element that can accept it will be searched for. If the sibling
                      element can accept the content, then a new element with the same name as the
                      sibling is created in which the content will be inserted.</p></li>
                  <li><uicontrol>Reject action when its result is invalid</uicontrol><p>If checked
                      and the result of the typing action is invalid, the action will not be
                      performed. </p></li>
                </ul></li>
              <li><uicontrol>Content Completion</uicontrol>
                <p>Controls the behavior that takes place when inserting elements using content
                  completion. Available options:</p><ul>
                  <li><uicontrol id="preferences-schema-aware-content-completion">Allow only
                      insertion of valid elements and attributes</uicontrol>
                    <p>If checked, only elements or attributes form the content completion proposals
                      list can be inserted in the document through content completion.</p></li>
                  <li><uicontrol>Show all possible elements in the content completion
                      list</uicontrol><p>Specifies whether <ph keyref="product"/> displays in the
                      content completion list of proposals all the possible elements. If an element
                      which is not allowed at the current offset is chosen by the user, the
                      application will attempt to insert it in a proper location using the schema
                      aware strategies.</p></li>
                </ul></li>
              <li><uicontrol>Warn on invalid content when performing action</uicontrol>
                <p>A warning message will be displayed when performing an action that will result in
                  invalid content. Available options:<ul id="ul_gt3_gqz_zd">
                    <li><uicontrol>Delete Element Tags</uicontrol><p> If checked, when the <xref
                          href="author-contextual-menu.dita">Delete Element Tags</xref> action will
                        result in an invalid content, a warning message will be displayed in which
                        the user is asked if the operation should continue.</p></li>
                    <li><uicontrol>Join Elements</uicontrol>
                      <p>If checked, when the <xref href="author-contextual-menu.dita">Join
                          Elements</xref> action will result in an invalid content, a warning
                        message will be displayed in which the user is asked if the operation should
                        continue.</p></li>
                  </ul></p></li>
            </ul></li>
        </ul></li>
      <li>
        <p id="convert_external_content_on_paste"><uicontrol>Convert external content on
            paste</uicontrol>
        </p>
        <p>If checked, <ph keyref="product"/>
          preserves the formatting style when you paste content copied from external applications
          (like web browsers or Office-like applications). This option is enabled by default and
          applies only to the major document type frameworks (DocBook, DITA, TEI, XHTML) and to
          those customized to support the <xref
            href="author-copy-paste-from-Office.dita#author-copy-paste-from-Office" format="dita"
            >content conversion on paste</xref>.</p>
      </li>
    </ul>
    <p>If the Schema Aware Editing is <b>On</b> or <b>Custom</b> all actions that can generate
      invalid content will be forwarded first toward <xref
        href="dg-author-schema-aware-editing-handler.dita"
      >AuthorSchemaAwareEditingHandler</xref>.</p>
  </body>
  <related-links>
    <link href="smart-paste-support.dita#smart-paste-support"/>
    <link href="author-copy-paste-from-Office.dita#author-copy-paste-from-Office"/>
  </related-links>
</topic>
