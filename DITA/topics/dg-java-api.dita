<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="dg-java-api">
  <title>Java API - Extending Author Functionality through Java</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Author Settings<indexterm>Java API</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p><ph keyref="product"/> Author has a built-in
      set of operations covering the insertion of text and XML fragments (see the <xref
        href="dg-default-author-operations.dita#dg-default-author-operations">Author Default
        Operations</xref>) and the execution of XPath expressions on the current document edited in
      Author mode. However, there are situations in which you need to extend this set. For instance
      if you need to enter an element whose attributes should be edited by the user through a
      graphical user interface. Or the users must send the selected element content or even the
      whole document to a server, for some kind of processing or the content authors must extract
      pieces of information from a server and insert it directly into the edited XML document. Or
      you need to apply an XPath expression on the current Author document and process the nodes of
      the result node set.</p>
    <p>The following sections contain the Java programming interface (API) available to the
      developers. You will need the <xref href="http://www.oxygenxml.com/oxygen_sdk_maven.html"
        scope="external" format="html">Oxygen SDK</xref> available <xref
        href="http://www.oxygenxml.com/developer.html" scope="external" format="html">on the <ph
          keyref="product"/> website</xref> which includes the source code of the Author operations
      in the predefined document types and the full documentation in Javadoc format of the public
      API available for the developer of Author custom actions.</p>
    <p>The next Java examples are making use of AWT classes. If you are developing extensions for
      the <ph keyref="product"/> XML Editor plugin
      for Eclipse you will have to use their SWT counterparts.</p>
    <p>It is assumed you already read the <xref
        href="../tasks/dg-configuring-actions-menus-toolbar.dita#dg-configuring-actions-menus-toolbar"
        >Configuring Actions, Menus, Toolbar</xref> section and you are familiar with the <ph
        keyref="product"/> Author customization. You
      can find the XML schema, CSS and XML sample in the <xref
        href="../topics/dg-sdf-files.dita#dg-sdf-files">Example Files Listings</xref>.</p>
    <note type="attention">
      <p>Make sure the Java classes of your custom Author operations are compiled with the same Java
        version used by <ph keyref="product"/>.
        Otherwise the classes may not be loaded by the Java virtual machine. For example if you run
          <ph product="editor"><ph keyref="product"
            /><ph>XML</ph> Editor</ph>
        <ph product="author"><ph keyref="product"/>
          <ph>XML</ph> Author</ph> with a Java 1.6 virtual machine but the Java classes of your
        custom Author operations are compiled with a Java 1.7 virtual machine then the custom
        operations cannot be loaded and used by the Java 1.6 virtual machine. </p>
    </note>
  </body>
  <related-links>
    <link
      href="http://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorOperation.html"
      format="html" scope="external"/>
  </related-links>
</topic>
