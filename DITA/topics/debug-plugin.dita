<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="debug-plugin">
  <title><?oxy_comment_start author="steven_higgs" timestamp="20150702T154945+0300" comment="Mark&apos;s comment: This seems to be a near duplicate of debug-sdk.dita. Reuse possibilities?"?>Debugging
    a Plugin Using the Eclipse Workbench<?oxy_comment_end?></title>
  <body>
    <p>To debug problems in the code of the plugin without having to re-bundle the Java classes of
      the plugin in a JAR library, follow these steps:<ol id="ol_ops_m3p_hj">
        <li>Download and unpack an <xref
            href="http://www.oxygenxml.com//InstData/Editor/All/oxygen.tar.gz" format="gz"
            scope="external">all platforms standalone version</xref> of Oxygen XML
            Author/Editor/Developer.<note>The extracted folder name depends on which product variant
            you have downloaded. For the purpose of this procedure the folder will be referred to as
              <filepath>[OXYGEN_DIR]</filepath>.</note></li>
        <li> Set up the Oxygen SDK following <xref
            href="http://www.oxygenxml.com/oxygen_sdk.html#Developer_Plugins" format="html"
            scope="external">this set of instructions</xref>.</li>
        <li>Create an Eclipse Java Project (let's call it <filepath>MyPluginProject</filepath>) from
          one of the sample plugins (the Workspace Access plugin for example). </li>
        <li>In the <filepath>MyPluginProject</filepath> folder, create a folder called
            <filepath>myPlugin</filepath>. In this new folder copy the
            <filepath>plugin.xml</filepath> from the sample plugin. Modify the added
            <filepath>plugin.xml</filepath> to add a library reference to the directory where
          Eclipse copies the compiled output. To find out where this directory is located, invoke
          the contextual menu of the project (in the <uicontrol>Project</uicontrol> view), and go to <menucascade>
            <uicontrol>Build Path</uicontrol>
            <uicontrol>Configure Build Path...</uicontrol>
          </menucascade>. Then inspect the value of the <uicontrol>Default output folder</uicontrol>
          text box.<p><b>Example:</b> If the compiled output folder is <filepath>classes</filepath>,
            then the you need to add in the <filepath>plugin.xml</filepath> the following library
            reference:
          <codeblock><codeph>&lt;library name="../classes"/></codeph></codeblock></p></li>
        <li>Copy the <filepath>plugin.dtd</filepath> from the
            <filepath>[OXYGEN_DIR]/plugins</filepath> folder in the root
            <filepath>MyPluginProject</filepath> folder.</li>
        <li>In the <filepath>MyPluginProject</filepath>'s build path add external JAR references to
          all the JAR libraries in the <filepath>[OXYGEN_DIR]/lib</filepath> folder. Now your
            <filepath>MyPluginProject</filepath> should compile successfully.</li>
        <li>In the Eclipse IDE, create a new <term>Java Application</term> configuration for
          debugging. Set the <uicontrol>Main class</uicontrol> box to
            <codeph>ro.sync.exml.Oxygen</codeph>. Click the <uicontrol>Arguments</uicontrol> tab and
          add the following code snippet in the <uicontrol>VM arguments</uicontrol> input box,
          making sure that the path to the plugins directory is the correct
            one:<codeblock>-Dcom.oxygenxml.app.descriptor=ro.sync.exml.EditorFrameDescriptor -Xmx1024m 
-XX:MaxPermSize=384m -Dcom.oxygenxml.editor.plugins.dir=D:\projects\MyPluginProject</codeblock><note>If
            you need to configure the plugin for oXygen XML Author or oXygen XML Developer, set the
              <codeph>com.oxygenxml.app.descriptor</codeph>  to
              <codeph>ro.sync.exml.AuthorFrameDescriptor</codeph> or
              <codeph>ro.sync.exml.DeveloperFrameDescriptor</codeph>, respectively.</note></li>
        <li>Add a break point in the source of one of your Java classes.</li>
        <li>Debug the created configuration. When the code reaches your breakpoint, the debug
          perspective should take over.</li>
      </ol></p>
  </body>
</topic>
