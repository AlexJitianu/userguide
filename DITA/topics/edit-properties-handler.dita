<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="edit-properties-handler">
  <title><?oxy_comment_start author="steven_higgs" timestamp="20160113T093853+0200" comment="EXM-35350"?>Implementing
    an Edit Properties Handler for Author Mode<?oxy_comment_end?></title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Author Settings<indexterm>Java API<indexterm>Author schema aware editing
              handler</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>To implement your own handler for editing the properties of items in
        <uicontrol>Author</uicontrol> mode, you can use the
        <apiname>ro.sync.ecss.extensions.api.EditPropertiesHandler</apiname> or
        <apiname>ro.sync.ecss.extensions.api.ExtensionsBundle.createEditPropertiesHandler()</apiname>
      methods. They allow you to present a specialized dialog box when the action of double-clicking
      an element tag is intercepted. For example, you could use it to present a dialog box that
      allows the user to editing the properties of an image.</p>
    <p><?oxy_comment_start author="steven_higgs" timestamp="20160113T093714+0200" comment="Pasted from similar topic. This will need to be replaced."?>For
      this handler to be called, the <xref keyref="options_editor_edit-modes_author_schema-aware"
          ><uicontrol>Schema Aware Editing</uicontrol> option</xref> must be set to <b>On</b> or
        <b>Custom</b> in the <xref href="preferences-schema-aware.dita#preferences-schema-aware"
          ><uicontrol>Schema-Aware</uicontrol> preferences page</xref>. The handler can either
      resolve a specific case, let the default implementation take place, or reject the edit
      entirely by throwing an <codeph>InvalidEditException</codeph>.</p>
    <codeblock outputclass="language-java">package simple.documentation.framework.extensions;

/**
 * Specific editing support for SDF documents.
 * Handles typing and paste events inside section and tables.
 */
public class SDFSchemaAwareEditingHandler implements AuthorSchemaAwareEditingHandler {</codeblock>
    <p>Typing events can be handled using the <apiname>handleTyping</apiname> method. For example,
      the <codeph>SDFSchemaAwareEditingHandler</codeph> checks if the schema is not a learned one,
      was loaded successfully, and if <xref keyref="options_editor_edit-modes_author_schema-aware"
          ><uicontrol>Smart Paste</uicontrol></xref> is active. If these conditions are met, the
      event will be handled.</p>
    <codeblock outputclass="language-java">/**
 * @see ro.sync.ecss.extensions.api.AuthorSchemaAwareEditingHandler#handleTyping(int, char, ro.sync.ecss.extensions.api.AuthorAccess)
 */
public boolean handleTyping(int offset, char ch, AuthorAccess authorAccess)
throws InvalidEditException {
  boolean handleTyping = false;
  AuthorSchemaManager authorSchemaManager = authorAccess.getDocumentController().getAuthorSchemaManager();
  if (!authorSchemaManager.isLearnSchema() &amp;&amp; 
      !authorSchemaManager.hasLoadingErrors() &amp;&amp;
      authorSchemaManager.getAuthorSchemaAwareOptions().isEnableSmartTyping()) {
    try {
      AuthorDocumentFragment characterFragment = 
        authorAccess.getDocumentController().createNewDocumentTextFragment(String.valueOf(ch));    
      handleTyping = handleInsertionEvent(offset, new AuthorDocumentFragment[] {characterFragment}, authorAccess);
    } catch (AuthorOperationException e) {
      throw new InvalidEditException(e.getMessage(), "Invalid typing event: " + e.getMessage(), e, false);
    }
  }
  return handleTyping;    
}</codeblock>
    <p>Implementing the <codeph>AuthorSchemaAwareEditingHandler</codeph> makes it possible to handle
      other events, such as the keyboard delete event at the given offset (using Delete or Backspace
      keys), delete element tags, delete selection, join elements, or paste
      fragment.<?oxy_comment_end?></p>
    <note conkeyref="reusable_notes_java-files/sdf_project"/>
  </body>
</topic>
