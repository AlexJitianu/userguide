<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="preferences-msxml-dot-net">
  <title>MSXML.NET Preferences</title><prolog>
    <metadata>
      <keywords><indexterm>Configure the Application<indexterm>XSLT/FO/XQuery preferences<indexterm>MSXML.NET</indexterm></indexterm></indexterm></keywords>
    </metadata>
  </prolog>
  <body>
    <p>To configure the <uicontrol>MSXML.NET</uicontrol> options, <ph
        conkeyref="reusable.menus/open-the-preferences-page"/> and go to <menucascade>
        <uicontrol>XML</uicontrol>
        <uicontrol>XSLT/FO/XQuery</uicontrol>
        <uicontrol>XSLT</uicontrol>
        <uicontrol>MSXML.NET</uicontrol>
      </menucascade>.</p>
    <p>The options of the MSXML.NET processor are:</p>
    <ul>
      <li><uicontrol>Enable XInclude processing</uicontrol> - If checked, XInclude references will
        be resolved when MSXML.NET is used as transformer in the <xref href="../concepts/transformation-scenario.dita">XSLT transformation scenario</xref>.</li>
      <li><uicontrol>Validate documents during parse phase</uicontrol> - If checked and either the
        source or stylesheet document has a DTD or schema against which its content can be checked,
        validation is performed.</li>
      <li><uicontrol>Do not resolve external definitions during parse phase</uicontrol> - By default
        MSXML.NET resolves external definitions such as DTD external subsets or external entity
        references when parsing source XML document and stylesheet document. Using this option you
        can disable this behaviour. Note, that it may affect also the validation process for the XML
        document.</li>
      <li conref="preferences-msxml-3-and-4.dita#preferences-msxml-3-and-4/strip-whitespace"/>
      <li conref="preferences-msxml-3-and-4.dita#preferences-msxml-3-and-4/show-time-information"/>
      <li><uicontrol>Forces ASCII output encoding</uicontrol> - There is a known problem with .NET 1.X XSLT processor (<apiname>System.Xml.Xsl.XslTransform</apiname> class): it doesn't support escaping of characters as XML character references when they cannot be represented in the output encoding. That means that when you output a character that cannot be represented in output encoding, it will be outputted as '?'. Usually this happens when output encoding is set to ASCII. With this option checked the output is forced to be ASCII encoded and all non-ASCII characters get escaped as XML character references (&amp;#nnnn; form).</li>
      <li><uicontrol>Allow multiple output documents</uicontrol> - This option allows to create
        multiple result documents using <xref href="http://www.exslt.org/exsl/elements/document/index.html" scope="external" format="html"> the <codeph>exsl:document</codeph> extension element.</xref>
      </li>
      <li><uicontrol>Use named URI resolver class</uicontrol> - This option allows to specify a
        custom URI resolver class to resolve URI references in <codeph>xsl:import</codeph> and
          <codeph>xsl:include</codeph> instructions (during XSLT stylesheet loading phase) and in
          <codeph>document()</codeph> function (during XSL transformation phase).</li>
      <li><uicontrol>Assembly file name for URI resolver class</uicontrol> - The previous option
        specifies partially or fully qualified URI resolver class name, e.g.
          <apiname>Acme.Resolvers.CacheResolver</apiname>. Such name requires additional assembly
        specification using this option or the next option, but fully qualified class name (which
        always includes an assembly specifier) is all-sufficient. See MSDN for more info about <xref
          href="http://msdn.microsoft.com/en-us/library/dfb3cx8s%28v=vs.71%29.aspx" scope="external" format="html"> fully qualified class names</xref>. This option specifies
        a file name of the assembly, where the specified resolver class can be found.</li>
      <li><uicontrol>Assembly GAC name for URI resolver class</uicontrol> - This option specifies
        partially or fully qualified name of the assembly in the <xref
          href="http://msdn.microsoft.com/en-us/library/yf1d93sz.aspx" scope="external" format="html"> global assembly cache</xref> (GAC), where the specified
        resolver class can be found. See MSDN for more info about <xref
          href="http://msdn.microsoft.com/en-us/library/0a7zy9z5%28v=vs.71%29.aspx" scope="external" format="html"> partial assembly names</xref>. Also see the previous
        option.</li>
      <li><uicontrol>List of extension object class names</uicontrol> - This option allows to
        specify <xref
          href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa382408%28v=vs.85%29.aspx"
          scope="external" format="html"> extension object</xref> classes, whose public methods then
        can be used as extension functions in an XSLT stylesheet. It is a comma-separated list of
        namespace-qualified extension object class names. Each class name must be bound to a
        namespace URI using prefixes, similar to providing XSLT parameters.</li>
      <li><uicontrol>Use specified EXSLT assembly</uicontrol> - MSXML.NET supports a rich library of
        the <xref href="http://www.exslt.org/" scope="external" format="html">EXSLT</xref> and <xref
          href="http://www.exslt.org/func/elements/function/" format="html" scope="external"
          >EXSLT.NET extension functions</xref> embedded or in a plugged in EXSLT.NET library. EXSLT
        support is enabled by default and cannot be disabled in this version. If you want to use an
        external EXSLT.NET implementation instead of a built-in one use this option.</li>
      <li><uicontrol>Credential loading source xml</uicontrol> - This option allows to specify user
        credentials to be used when loading XML source documents. The credentials should be provided
        in the <i>username:password@domain</i> format (all parts are optional).</li>
      <li><uicontrol>Credential loading stylesheet</uicontrol> - This option allows to specify user
        credentials to be used when loading XSLT stylesheet documents. The credentials should be
        provided in the <i>username:password@domain</i> format (all parts are optional).</li>
    </ul>
  </body>
</topic>
