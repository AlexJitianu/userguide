<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="preferences-xslt-saxon8">
  <title>Saxon-HE/PE/EE Preferences</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Configure the Application<indexterm>XSLT/FO/XQuery preferences<indexterm>Saxon
              HE/PE/EE</indexterm><indexterm>Saxon-HE/PE/EE</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>To configure the <uicontrol>Saxon HE/PE/EE</uicontrol> options, <ph
        conkeyref="reusable.menus/open-the-preferences-page"/> and go to  <menucascade>
        <uicontrol>XML</uicontrol>
        <uicontrol>XSLT/FO/XQuery</uicontrol>
        <uicontrol>XSLT</uicontrol>
        <uicontrol>Saxon</uicontrol>
        <uicontrol>Saxon HE/PE/EE</uicontrol>
      </menucascade>.</p>
    <p><ph keyref="product"/> allows you to configure
      the following XSLT options for the Saxon <ph
        keyref="saxon9FullVersion"/> transformer
      (editions: Home Edition, Professional, and Enterprise):</p>
    <ul>
      <li>
        <uicontrol>Use a configuration file ("-config")</uicontrol> - Sets a Saxon <ph
          keyref="saxon9FullVersion"/> configuration file that is executed for XSLT transformation
        and validation processes.</li>
      <li id="saxon-option-versmsg">
        <uicontrol>Version warnings ("-versmsg")</uicontrol> - Warns you when the transformation is
        applied to an XSLT 1.0 stylesheet.</li>
      <li id="saxon-option-l">
        <uicontrol>Line numbering ("-l")</uicontrol> - Error line number is included in the output
        messages.</li>
      <?oxy_comment_start author="Mark" timestamp="20140924T102323-0400" comment="See issue #58"?>
      <li id="saxon-option-debug-trace">
        <uicontrol>Debugger trace into XPath expressions (applies to debugging sessions)</uicontrol>
        - Instructs the <xref product="editor editorEclipse developer developerEclipse"
          href="../tasks/steps-in-typical-debug-process.dita" format="dita">XSLT Debugger</xref><ph
          product="author authorEclipse">XSLT Debugger</ph> to step into XPath expressions.</li>
      <?oxy_comment_end?>
      <li>
        <uicontrol>Expand attributes defaults ("-expand")</uicontrol> - Specifies whether the
        attributes defined in the associated DTD or XML Schema that have default values are expanded
        in output of the transformation you are executing.</li>
      <li id="saxon-option-dtd">
        <uicontrol>DTD validation of the source ("-dtd")</uicontrol> - The following options are available:<ul>
          <li>
            <uicontrol>On</uicontrol> - Requests <term>DTD</term> validation of the source
            file and of any files read using the document() function.</li>
          <li>
            <uicontrol>Off</uicontrol> - (default setting) Suppresses DTD validation.</li>
          <li>
            <uicontrol>Recover</uicontrol> - Performs DTD validation but treats the errors as
            non-fatal. <note>Any external DTD is likely to be read even if not used for validation,
              because DTDs can contain definitions of entities. </note></li>
        </ul></li>
      <li id="saxon-option-warnings">
        <uicontrol>Recoverable errors ("-warnings")</uicontrol> - Policy for handling recoverable
        errors in the stylesheet: Allows you to choose how dynamic errors are handled. One of the
        following options can be selected:<ul>
          <li><uicontrol>Recover silently ("silent")</uicontrol></li>
          <li><uicontrol>Recover with warnings ("recover")</uicontrol> - default setting</li>
          <li><uicontrol>Signal the error and do not attempt recovery ("fatal")</uicontrol></li>
        </ul></li>
      <li id="saxon-option-strip">
        <uicontrol>Strip whitespaces ("-strip")</uicontrol> - Strip whitespaces feature can be one
        of the following three options:<ul>
          <li><uicontrol>All ("all")</uicontrol> - Strips all whitespace text nodes from source
            documents before any further processing, regardless of any
              <codeph>xsl:strip-space</codeph> declarations in the stylesheet, or any
              <codeph>xml:space</codeph> attributes in the source document.</li>
          <li><uicontrol>Ignorable ("ignorable")</uicontrol> - Strips all ignorable whitespace text
            nodes from source documents before any further processing, regardless of any
              <codeph>xsl:strip-space</codeph> declarations in the stylesheet, or any
              <codeph>xml:space</codeph> attributes in the source document. Whitespace text nodes
            are ignorable if they appear in elements defined in the DTD or schema as having
            element-only content.</li>
          <li><uicontrol>None ("none")</uicontrol> - default setting. No whitespaces are stripped
            before further processing. However, whitespace are stripped if this is specified in the
            stylesheet using <codeph>xsl:strip-space</codeph>.</li>
        </ul></li>
      <li id="saxon-option-opt">
        <uicontrol>Optimization level ("-opt")</uicontrol> - Set optimization level. The value is an
        integer in the range 0 (no optimization) to 10 (full optimization); currently all values
        other than 0 result in full optimization but this is likely to change in the future. The
        default is full optimization; this feature allows optimization to be suppressed in cases
        where reducing compile time is important, or where optimization gets in the way of
        debugging, or causes extension functions with side-effects to behave unpredictably. (Note
        however, that even with no optimization, the lazy evaluation may still cause the evaluation
        order to be not as expected). </li>
    </ul>
    <p>The advanced options available only in Saxon PE / EE are:</p>
    <ul>
      <li id="saxon-option-ext">
        <uicontrol>Allow calls on extension functions ("-ext")</uicontrol> - If checked, the
        stylesheet is allowed to call external Java functions. This does not affect calls on
        integrated extension functions, including Saxon and EXSLT extension functions. This option
        is useful when loading an untrusted stylesheet, perhaps from a remote site using an http://
        URL; it ensures that the stylesheet cannot call arbitrary Java methods and thus gain
        privileged access to resources on your machine. </li>
      <li>
        <uicontrol>Register Saxon-CE extension functions and instructions</uicontrol> - Registers
        the Saxon-CE extension functions and instructions when compiling a stylesheet using the
        Saxon <ph keyref="saxon9FullVersion"/> processors.<note
          conref="supported-XSLT-processors.dita#supported-XSLT-processors/saxon-ce-execution-limitation"
          product="developer editor developerEclipse editorEclipse"/>
      </li>
    </ul>
    <p>The advanced options available only in Saxon EE are:<ul>
        <li>
          <uicontrol>XML Schema version</uicontrol> - Use this option to change the default XML
          Schema version. To change the default XML Schema version, <ph
            conkeyref="reusable.menus/open-the-preferences-page"/> and go to <menucascade>
            <uicontrol> XML</uicontrol>
            <uicontrol> XML Parser</uicontrol>
            <uicontrol> XML Schema</uicontrol>
          </menucascade>.<note>This option is available when you configure the Saxon EE advanced
            options from a transformation scenario.</note></li>
        <li id="saxon-option-val">
          <uicontrol>Validation of the source file ("-val")</uicontrol> - Requests schema-based
          validation of the source file and of any files read using the <codeph>document()</codeph>
          or similar functions. Validation is available only with <keyword>Saxon-EE</keyword>, and this flag
          automatically switches on the <codeph>-sa</codeph> option. Available options:<ul>
            <li><uicontrol>Schema validation ("strict")</uicontrol> - This mode requires an XML
              Schema and specifies that the source documents should be parsed with schema-validation
              enabled.</li>
            <li><uicontrol>Lax schema validation ("lax")</uicontrol> - This mode specifies if the
              source documents should be parsed with schema-validation enabled if an XML Schema is
              provided.</li>
            <li><uicontrol>Disable schema validation</uicontrol> - This specifies that the source
              documents should be parsed with schema-validation disabled.</li>
          </ul></li>
        <li id="saxon-option-outval">
          <uicontrol>Validation errors in the results tree treated as warnings
              ("-outval")</uicontrol> - Normally, if validation of result documents is requested, a validation error is fatal.
            Enabling this option causes such validation failures to be treated as warnings. 
        </li>
        <li id="saxon-option-outval-comments">
          <uicontrol>Write comments for non-fatal validation errors of the result
            document</uicontrol> - The validation messages are written (where possible) as a comment
          in the result document itself. </li>
        <li id="generate_bytecode_option">
          <uicontrol>Generate bytecode ("--generateByteCode:(on|off)")</uicontrol> - When you enable
          this option, <keyword>Saxon-EE</keyword> attempts to generate Java bytecode for evaluation of parts of a
          query or stylesheet that are amenable to such treatment. For further details regarding
          this option, go to<xref href="http://www.saxonica.com/documentation/javadoc/"
            format="html#GENERATE_BYTE_CODE" scope="external"
            >http://www.saxonica.com/documentation/javadoc/</xref>.</li>
        <li>
          <uicontrol>Initializer class</uicontrol> - Equivalent with the <term>-init</term> Saxon command-line argument. The value is the
            name of a user-supplied class that implements the
              <apiname>net.sf.saxon.lib.Initializer</apiname> interface; this initializer is called
            during the initialization process, and may be used to set any options required on the
            configuration programmatically. It is particularly useful for tasks such as registering
            extension functions, collations, or external object models, especially in Saxon-HE where
            the option cannot be set via a configuration file. Saxon only calls the initializer when
            running from the command line, but the same code may be invoked to perform
            initialization when running user application code.<note type="important">The <xref
                href="xslt-tab.dita#xslt-tab/advanced-options">advanced Saxon-HE/PE/EE options
                configured in a transformation scenario</xref> override the Saxon-HE/PE/EE options
              defined globally.</note>
        </li>
      </ul></p>
  </body>
</topic>