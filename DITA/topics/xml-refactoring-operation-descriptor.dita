<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="xml-refactoring-operation-descriptor">
  <title>Custom Refactoring Operation Descriptor File</title>
  <body>
    <p>The second step in creating a custom refactoring operation is to create an operation
      descriptor file. The easiest way to do this is to use the <b>New</b> document wizard and
      choose the <b>XML Refactoring Operation Descriptor</b> template.</p>
    <section>
      <title>Introduction to the Descriptor File</title>
      <p>This file contains information (such as <codeph>name</codeph>,
        <codeph>description</codeph>, and <codeph>id</codeph>) that is necessarily when loading an
        XML Refactoring operation . It also contains the path to the XQuery Update script that is
        associated with the particular operation through the <codeph>script</codeph> element.</p>
      <p>You can specify a <codeph>category</codeph> for your custom operations to logically group
        certain operations. The <codeph>category</codeph> element is optional and if it is not
        included in the descriptor file, the default name of the category for the custom operations
        is <i>Other operations</i>. </p>
      <p>The descriptor file is edited and validated against the following schema:
          <filepath>frameworks/xml_refactoring/operation_descriptor.xsd</filepath>. </p>
    </section>
    <section>
      <title>Declaring Parameters in the Descriptor File</title>
      <p>If the XQuery Update script includes parameters, they should be declared in the
          <b>parameters</b> section of the descriptor file. All the parameters specified in this
        section of the descriptor file will be displayed in the <uicontrol>XML
          Refactoring</uicontrol> tool within <xref
            href="refactoring-xml-documents.dita#refactoring-xml-documents/parameters_dlentry">the
            <uicontrol>Configure Operation Parameters</uicontrol> wizard page</xref> for that
        particular operation.</p>
      <p>The value of the first <codeph>description</codeph> element in the <b>parameters</b>
        section will be displayed at the top of <xref
          href="refactoring-xml-documents.dita#refactoring-xml-documents/parameters_dlentry">the
            <uicontrol>Configure Operation Parameters</uicontrol> wizard page</xref>.</p>
      <p>To declare a parameter, specify the following information:</p>
      <ul id="ul_irs_glv_gr">
        <li><b><codeph>label</codeph></b> - This value is displayed in the user interface for the
          parameter.</li>
        <li><b><codeph>name</codeph></b> - The parameter name used in the XQuery Update script and
          it should be the same as the one declared in the XQuery script.</li>
        <li><b><codeph>type</codeph></b> - Defines the type of the parameter and how it will be
          rendered. There are several types available:<ul id="ul_xm5_j4v_gr">
            <li><codeph>TEXT</codeph> - Generic type used to specify a simple text fragment.</li>
            <li>
              <p><codeph>XPATH</codeph> - Type of parameter whose value is an XPATH expression. For
                this type of parameter, <ph keyref="product"/> will use a text input with
                corresponding content completion and syntax highlighting.</p>
              <note>The value of this parameter is transferred as plain text to the XQuery Update
                transformation without being evaluated. To evaluate it in the XQuery Update script
                you could use the <codeph>saxon:evaluate</codeph> Saxon extension function.</note>
              <note>A relative XPath expression is converted to an absolute XPath expression by
                adding <codeph>//</codeph> before it (<codeph>//XPathExp</codeph>). This conversion
                is done before transferring the XPath expression to the XQuery Update engine.</note>
              <note>When writing XPath expressions, you can only use prefixes declared in the <xref
                  href="preferences-xpath.dita"><menucascade>
                    <uicontrol>Options</uicontrol>
                    <uicontrol>Preferences</uicontrol>
                    <uicontrol>XML</uicontrol>
                    <uicontrol>XSLT-FO-XQUERY</uicontrol>
                    <uicontrol>XPath</uicontrol>
                  </menucascade></xref> options page.</note>
            </li>
            <li><codeph>NAMESPACE</codeph> - Used for editing namespace values.</li>
            <li><codeph>REG_EXP_FIND</codeph> - Used when you want to match a certain text by using
              Perl-like regular expressions.</li>
            <li><codeph>REG_EXP_REPLACE</codeph> - Used along with <codeph>REG_EXP_FIND</codeph> to
              specify the replacement string.</li>
            <li><codeph>XML_FRAGMENT</codeph> - This type is used when you want to specify an XML
              fragment. For this type, <ph keyref="product"/> will display a text area specialized
              for inserting XML documents.</li>
            <li><codeph>NC_NAME</codeph> - The parameter for <codeph>NC_NAME</codeph> values. It is
              useful when you want to specify the local part of a <term>QName</term> for an element
              or attribute.</li>
            <li><codeph>BOOLEAN</codeph> - Used to edit boolean parameters.</li>
            <li><codeph>TEXT_CHOICE</codeph> - It is useful for parameters whose value should be
              from a list of possible values. <ph keyref="product"/> renders each possible value as
              a radio button.</li>
          </ul></li>
        <li><b><codeph>description</codeph></b> - The description of the parameter. It is used by
          the application to display a tooltip when you hover over the parameter.</li>
        <li><b><codeph>possibleValues</codeph></b> - Contains the list with possible values for the
          parameter and you can specify the default value, as in the following
          example:<codeblock outputclass="language-xml">&lt;possibleValues onlyPossibleValuesAllowed="true">
    &lt;value name="before">Before&lt;/value>
    &lt;value name="after"default="true"&gt;After&lt;/value>
    &lt;value name="firstChild">First child&lt;/value>
    &lt;value name="lastChild">Last child&lt;/value>
&lt;/possibleValues></codeblock></li>
      </ul>
    </section>
    <section>
      <title>Specialized Parameters (<codeph>elementParameter</codeph> and
          <codeph>attributeParameter</codeph>)</title>
      <p>If you want to match elements or attributes, use the specialized parameters
          <codeph>elementParameter</codeph> or <codeph>attributeParameter</codeph>. If you use these
        parameters, <ph keyref="product"/> will propose all declared elements or attributes based on
        the schema associated with the currently edited file.</p>
      <p>Example of an <codeph>elementParameter</codeph>:</p>
      <codeblock outputclass="language-xml">&lt;elementParameter id="elemID">
    &lt;localName label="Name" name="element_localName" allowsAny="true">
        &lt;description>The local name of the attribute's parent element.&lt;/description>           
    &lt;/localName>
    &lt;namespace label="Namespace" name="element_namespace" allowsAny="true">
        &lt;description>The local name of the attribute's parent element&lt;/description>           
    &lt;/namespace>        
&lt;/elementParameter></codeblock>
      <p>This parameter is used to specify elements by local name and namespace. For this type of
        parameter, the application displays two combo boxes with elements and namespaces collected
        from the associated schema of the currently edited file. The text from the
          <codeph>label</codeph> attribute is displayed in the application as label of the
        associated combo. The <codeph>name</codeph> attribute is used to specify the name of the
        parameter from the XQuery Update script. If you specify the <codeph>allowsAny</codeph>
        attribute, the application will propose <i>&lt;ANY></i> as a possible value for the
          <b>Name</b> and <b>Namespace</b> combo boxes.</p>
      <p>Example of an <codeph>attributeParameter</codeph>:</p>
      <codeblock outputclass="language-xml">&lt;attributeParameter dependsOn="elemID">
    &lt;localName label="Name" name="attribute_localName">
        &lt;description>The name of the attribute to be converted.&lt;/description>
    &lt;/localName>
    &lt;namespace label="Namespace" name="attribute_namespace" allowsAny="true">
        &lt;description>The namespace of the attribute to be converted.&lt;/description>
    &lt;/namespace>        
&lt;/attributeParameter></codeblock>
      <p>This parameter is used to specify attributes by local name and namespace. For this type of
        parameter, the application displays two combo boxes with attributes and their namespaces
        collected from the associated schema of the currently edited file. The text from the
          <codeph>label</codeph> attribute is displayed in the application as the label of the
        associated combo box.<note>An <codeph>attributeParameter</codeph> is dependant upon an
            <codeph>elementParameter</codeph>. The list of attributes and namespaces are computed
          based on the selection in the <codeph>elementParameter</codeph> combo boxes.</note></p>
    </section>
    <note>All predefined operations are loaded from the <filepath>installDir/refactoring</filepath>
      folder.</note>
  </body>
  <related-links>
    <link href="custom_operation_sample.dita#custom_operation_sample"/>
  </related-links>
</topic>
