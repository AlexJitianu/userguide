<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="oxy-editor-properties">
  <title>oxy_editor() Custom Form Control Properties</title>
  <!--Proofed
RESOURCE TOPIC-->
  <shortdesc>The <codeph>oxy_editor</codeph> function allows you to edit attributes or simple
    element values in the <uicontrol>Author</uicontrol> mode, using standard built-in form controls
    (such as combo boxes, text fields, pop-ups, URL choosers, etc.) or to implement your own custom
    form controls and renderers.</shortdesc>
  <body>
    <codeblock outputclass="language-css">myElement {
    content: oxy_editor(
        type, [<i>my form control</i>],
        edit, "@my_attr"
    )
}</codeblock>
    <p>The <codeph>oxy_editor</codeph> custom form control supports the following properties:</p>
    <p>
      <ul>
        <li><ph id="actionContext-property"><codeph>actionContext</codeph> - Specifies the context
            in which the action associated with the form control is executed. Its possible values
            are <codeph>element</codeph> and <codeph>caret</codeph>. If you select the
              <codeph>element</codeph> value, the context is the element that holds the form
            control. If you select the <codeph>caret</codeph> value, the action is invoked at the
            caret location. If the caret is not inside the element that holds the form control, the
              <codeph>element</codeph> value is selected automatically.</ph></li>
        <li id="actionID-property"><codeph>actionID</codeph> - The ID of the action, specified in
          the associated <xref href="the-action-dialog.dita">document type framework</xref>, that is
          invoked when you click the button.<note>The element that contains the form control
            represents the context where the action is invoked. </note></li>
        <li><ph id="action-property"><codeph>action</codeph> - Defines an action directly, rather
            than using the <codeph>actionID</codeph> parameter to reference an action from the
            associated <xref href="the-action-dialog.dita">document type framework</xref>. This
            property is defined using the <xref href="../concepts/dg-action-function.dita"
                ><codeph>oxy_action</codeph> function</xref>.</ph><p>
            <codeblock outputclass="language-css">oxy_action(
          name, 'Insert Section', 
          description, 'Insert an element after the current one', 
          icon, url('insert.png'), 
          operation, 'ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation', 
          arg-fragment, '&lt;element&gt;${caret}&lt;/element&gt;',
          arg-insertLocation, '.',
          arg-insertPosition, 'After'
)</codeblock>
          </p></li>
        <li><ph id="action-list-property"><codeph>action_list</codeph> - Defines a list of actions
            directly, rather than using the <codeph>actionID</codeph> parameter to reference actions
            from the associated <xref href="the-action-dialog.dita">document type framework</xref>.
            This property is defined using the <xref href="../concepts/dg-action-list-function.dita"
                ><codeph>oxy_action_list</codeph> function</xref>.</ph><p>
            <codeblock outputclass="language-css">oxy_action_list(
          oxy_action(
                name, 'Insert', 
                description, 'Insert an element after the current one', 
                operation, 'ro.sync.ecss.extensions.commons.operations.InsertFragmentOperation', 
                arg-fragment, '&lt;element&gt;&lt;/element&gt;',
                arg-insertLocation, '.',
                arg-insertPosition, 'After'
          ),
          oxy_action(
                name, 'Delete', 
                description, 'Deletes the current element', 
                operation, 'ro.sync.ecss.extensions.commons.operations.DeleteElementOperation' 
          )
      )</codeblock>
          </p></li>
        <li><ph id="actionDisplayStyle-property"><codeph>actionStyle</codeph> - Specifies what to
            display for an action in the form control. The values of this property can be text,
            icon, or both.</ph></li>
        <li><ph id="background-color-property"><codeph>background-color</codeph> - Specifies the
            background color of the form control. If the value of the
              <codeph>background-color</codeph> property is <codeph>inherit</codeph>, the form
            control has the same color as the element in which it is inserted.</ph></li>
        <li><ph id="color-property"><codeph>color</codeph> - Specifies the foreground color of the
            form control. If the value of the <codeph>color</codeph> property is
              <codeph>inherit</codeph>, the form control has the same color as the element in which
            it is inserted.</ph></li>
        <li><ph id="columns-property"><codeph>columns</codeph> - Controls the width of the form
            control. The unit size is the width of the <uicontrol>w</uicontrol> character.</ph></li>
        <li>
          <p id="contentType_property"><codeph>contentType</codeph> - Specifies the type of content
            for which the form control offers syntax highlighting. The following values are
            supported: <codeph>text/css; text/shell; text/cc; text/xquery; text/xml; text/python;
              text/xsd; text/c; text/xpath; text/javascript; text/xsl; text/wsdl; text/html;
              text/xproc; text/properties; text/sql; text/rng; text/sch; text/json; text/perl;
              text/php; text/java; text/batch; text/rnc; text/dtd; text/nvdl;
            text/plain.</codeph></p>
        </li>
        <li>
          <p id="edit_property"><codeph>edit</codeph> - Lets you edit the value of an attribute, the
            text content of an element, or Processing Instructions (PI). This property can have the
            following values:<ul>
              <li><uicontrol>@attribute_name</uicontrol> - The name of the attribute whose value is
                being edited. If the attribute is in a namespace, the value of the property must be
                a <term>QName</term> and the CSS must have a namespace declaration for the
                prefix.</li>
              <li><uicontrol>#text</uicontrol> - Specifies that the presented/edited value is the
                simple text value of an element.<note>You can set the value of the
                    <codeph>visibility</codeph> property to <codeph>-oxy-collapse-text</codeph> to
                  render the text only in the form control that the <codeph>oxy_editor</codeph>
                  function specifies.</note></li>
            </ul></p>
        </li>
        <li><ph id="editorSort"><codeph>editorSort</codeph> - Allows you to sort the values rendered
            on the form control. The possible values of this property are <codeph>ascending</codeph>
            and <codeph>descending</codeph>.</ph></li>
        <li><ph id="enable-read-only-context-property"><codeph>enableInReadOnlyContext</codeph> - To
            enable <xref href="../concepts/button-editor.dita#button-editor">button form
              controls</xref> or <xref href="button-group-editor.dita#button-group-editor">groups of
              buttons form controls</xref> this property needs to be set to <codeph>true</codeph>.
            This property can be used to specify areas as <term>read-only</term> (by setting the
              <codeph>-oxy-editable</codeph> property to <codeph>false</codeph>). This is useful
            when you want to execute an action that does not modify the context.</ph> If this
          property is missing or set to <codeph>false</codeph>, the <xref
            href="../concepts/button-editor.dita#button-editor">button form controls</xref> or <xref
            href="button-group-editor.dita#button-group-editor">groups of buttons form
            controls</xref> are disabled. </li>
        <li><ph id="fontInherit-property"><codeph>fontInherit</codeph> - This value specifies
            whether the form control inherits its font from its parent element. The values of this
            property can be <codeph>true</codeph> or <codeph>false</codeph>.</ph></li>
        <li><ph id="href-property"><codeph>href</codeph> - The absolute or relative location of a
            resource.</ph></li>
        <li><ph id="id-property"><codeph>id</codeph> - The unique identifier of an item.</ph></li>
        <li><ph id="indentOnTab_property"><codeph>indentOnTab</codeph> - Specifies the behaviour of
            the <uicontrol>Tab</uicontrol> key. If the value of this property is set to
              <codeph>true</codeph>, the <uicontrol>Tab</uicontrol> key inserts characters. If it is
            set to <codeph>false</codeph>, <uicontrol>Tab</uicontrol> is used for navigation,
            jumping to the next editable position in the document.</ph></li>
        <li><ph id="labels-property"><codeph>labels</codeph> - This property must have the same
            number of items as the <codeph>values</codeph> property. Each item provides a literal
            description of the items listed in the <codeph>values</codeph> property.</ph></li>
        <li><ph id="rendererSeparator-property"><codeph>rendererSeparator</codeph> - Defines a
            separator used when multiple values are rendered.</ph></li>
        <li><ph id="rendererSort"><codeph>rendererSort</codeph> - Allows you to sort the values
            rendered on the form control label. The possible values of this property are
              <codeph>ascending</codeph> and <codeph>descending</codeph>.</ph></li>
        <li><ph id="resultSeparator-property"><codeph>resultSeparator</codeph> - If multiple
            check-boxes are used, the separator is used to compose the final result.</ph></li>
        <li><ph id="property-rows"><codeph>rows</codeph> - This property specifies the number of
            rows that the form control presents.</ph></li>
        <li><ph id="selectionMode-property"><codeph>selectionMode</codeph> - Specifies whether the
            form control allows the selection of a single value or multiple values. The predefined
            values of this property are <codeph>single</codeph> and
          <codeph>multiple</codeph>.</ph></li>
        <li>
          <p id="show_icon"><codeph>showIcon</codeph> - Specifies if the action icon should be
            displayed on the button form control. If this property is missing then the button
            displays the icon only if it is available, or the text if the icon is not available. The
            values of this property can be <codeph>true</codeph> or
            <codeph>false</codeph>.<codeblock outputclass="language-css">element {
  content: oxy_button(actionID, 'remove.attribute', showIcon, true);
}</codeblock></p>
        </li>
        <li>
          <p id="show_text"><codeph>showText</codeph> - Specifies if the action text should be
            displayed on the button form control. If this property is missing then the button
            displays the icon only if it is available, or the text if the icon is not available. The
            values of this property can be <codeph>true</codeph> or
            <codeph>false</codeph>.<codeblock outputclass="language-css">element {
  content: oxy_button(actionID, 'remove.attribute', showText, true);
}</codeblock></p>
        </li>
        <li>
          <p><codeph>text-align</codeph> - Specifies the alignment of the generated content in its
            reserved space. This property has three possible values:<ul>
              <li><uicontrol>left</uicontrol></li>
              <li><uicontrol>right</uicontrol></li>
              <li><uicontrol>center</uicontrol></li>
            </ul><codeblock outputclass="language-css">element {
  content: 
    oxy_label(text, "Label1:", width, 20em, text-align, center)
    oxy_label(text, "Label2:", width, 100px, text-align, right)
}</codeblock></p>
        </li>
        <li><ph id="text-property"><codeph>text</codeph> - This property specifies the built-in form
            control you are using.</ph></li>
        <li><ph id="tooltips-property"><codeph>tooltips</codeph> - Associates tooltips to each value
            in the <codeph>values</codeph> property. The value of this property is a list of
            tooltips separated by commas. If you want the tooltip to display a comma, use the
              <codeph>${comma}</codeph> variable.</ph> The property will be ignored if the number of
          tooltips and the number of values don't match.</li>
        <li><ph id="tooltip-property"><codeph>tooltip</codeph> - Specifies a tooltip to be displayed
            when you hover over the form control.</ph></li>
        <li><ph id="transparent-property"><codeph>transparent</codeph> - Flattens the aspect of the
            button form control, removing its border and background.</ph></li>
        <li><ph id="type-property"><codeph>type</codeph> - This property specifies the built-in form
            control you are using. This property can have one of the following values:</ph><p>
            <ul id="ul_lsc_vpl_rq">
              <li><codeph>oxy_textfield</codeph> - A text field form control, with optional content
                completion capabilities, is used to present and edit a single line of text.</li>
              <li><codeph>oxy_combobox</codeph> - A combo-box is used that can be a drop-down list
                or a combination of a drop-down list and a single-line text field.</li>
              <li><codeph>oxy_checkbox</codeph> - Single or multiple check boxes are used to present
                and select a value.</li>
              <li><codeph>oxy_popup</codeph> - A pop-up menu, allowing single or multiple
                selections, is used to provide quick access to various actions.</li>
              <li><codeph>oxy_button</codeph> - A button is used that invokes a specific author
                action.</li>
              <li><codeph>oxy_buttonGroup</codeph> - A group of buttons that invoke specific author
                actions.</li>
              <li><codeph>oxy_textArea</codeph> - A text box is used to present and edit multiple
                lines of text.</li>
              <li><codeph>oxy_urlChooser</codeph> - A dialog box with a browse button is used to
                select a location of local or remote resources.</li>
              <li><codeph>oxy_datePicker</codeph> - A form control with a calendar browser button is
                used to select a date in a specified format.</li>
              <li><codeph>oxy_htmlContent</codeph>- A form control box is used that is capable of
                rendering HTML content.</li>
            </ul>
          </p></li>
        <li><ph id="uncheckedValues-property"><codeph>uncheckedValues</codeph> - Specifies the
            values that are committed when check-boxes are not selected.</ph></li>
        <li><ph id="values-property"><codeph>values</codeph> - Specifies the values that populate
            the content completion list of proposals. If these values are not specified, they are
            collected from the associated schema.</ph></li>
        <li><ph id="visible-property"><codeph>visible</codeph> - Specifies whether or not the form
            control is visible. The possible values of this property are <codeph>true</codeph> (the
            form control is visible) and <codeph>false</codeph> (the form control is not
            visible).</ph></li>
        <li><ph id="width-property"><codeph>width</codeph> - Specifies the width of the content area
            using relative (<codeph>em</codeph>, <codeph>ex</codeph>), absolute
            (<codeph>in</codeph>, <codeph>cm</codeph>, <codeph>mm</codeph>, <codeph>pt</codeph>,
              <codeph>pc</codeph>, <codeph>px</codeph>), and percentage (followed by the
              <codeph>%</codeph> character) length units. The <codeph>width</codeph> property takes
            precedence over the <codeph>columns</codeph> property (if the two are used
            together).</ph></li>
        <li><ph id="hover-property-li"><codeph>hoverPseudoclassName</codeph> - Allows you to change
            the way an element is rendered when you hover over a form control. The value is the name
            of a CSS pseudo class. When you hover over the form control, the specified pseudo class
            will be set on the element that contains the form
          control.</ph><codeblock outputclass="language-css">p:before {
  content: oxy_button(hoverPseudoclassName, 'showBorder')
}
p:showBorder {
  border: 1px solid red;
}</codeblock></li>
      </ul>
    </p>
  </body>
  <related-links>
    <link href="implementing-custom-form-controls.dita#implementing-custom-form-controls"/>
  </related-links>
</topic>
