<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="editor-variables">
  <title>Editor Variables</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Configure the Application<indexterm>editor variables</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>An editor variable is a shorthand notation for context-dependent information, such as a file
      or folder path, a time-stamp, or a date. It is used in the definition of a command (for
      example, the input URL of a transformation, the output file path of a transformation, or the
      command line of an external tool) to make a command or a parameter generic and re-usable with
      other input files. When the same command is applied to different files, the notation is
      expanded at the execution of the command so that the same command has different effects
      depending on the actual file.</p>
    <p>You can use the following editor variables in <ph keyref="product"/> commands of external
      engines or other external tools, in transformation scenarios, <ph product="developer">and
        in</ph> validation scenarios<ph product="author  editor">, and Author
        operations</ph>:</p>
    <ul>
      <li id="edVar-oxygenHome"><varname>${oxygenHome}</varname> - <ph keyref="product"/>
        installation folder as URL.</li>
      <li id="edVar-oxygenInstallDir"><varname>${oxygenInstallDir}</varname> - <ph
          keyref="product"/> installation folder as file path.</li>
      <li><varname>${framework}</varname> - The path (as URL) of the current framework, as part
        of the <filepath>[OXYGEN_DIR]/frameworks</filepath> directory.</li>
      <li><varname>${framework(fr_name)}</varname> - The path (as URL) of the
          <codeph>fr_name</codeph> framework. </li>
      <li><varname>${frameworkDir(fr_name)}</varname> - The path (as file path) of the
          <codeph>fr_name</codeph> framework. <note>Because multiple frameworks might have the same
          name (although it is not recommended), for both <varname>${framework(fr_name)}</varname>
          and <varname>${frameworkDir(fr_name)}</varname> editor variables <ph keyref="product"/>
          employs the following algorithm when searching for a given framework name:<ul>
            <li>all frameworks are sorted, from high to low, according to their <xref
                href="the-document-type-dialog.dita#the-document-type-dialog/dta_priority"
                  ><uicontrol>Priority</uicontrol></xref> setting from the framework
              configuration</li>
            <li>next, if the two or more frameworks have the same name and priority, a further
              sorting based on the <uicontrol>Storage</uicontrol> setting is made, in the exact
              following order:<ul>
                <li>frameworks stored in the internal <ph keyref="product"/> options</li>
                <li>additional frameworks added in the <xref
                    href="framework-location.dita#framework-location"
                      ><uicontrol>Locations</uicontrol> preferences page</xref></li>
                <li>frameworks installed using the add-ons support</li>
                <li>frameworks found in the <xref href="framework-location.dita#framework-location"
                    >main frameworks location</xref> (<uicontrol>Default</uicontrol> or
                    <uicontrol>Custom</uicontrol>)</li>
              </ul></li>
          </ul></note></li>
      <li id="edVar-frameworks"><varname>${frameworks}</varname> - The path (as URL) of the
        <filepath>[OXYGEN_DIR]</filepath> directory.</li>
      <li><varname>${frameworkDir}</varname> - The path (as file path) of the current framework,
        as part of the <filepath>[OXYGEN_DIR]/frameworks</filepath> directory.</li>
      <li id="edVar-frameworksDir"><varname>${frameworksDir}</varname> - The path (as file path)
        of the <filepath>[OXYGEN_DIR]/frameworks</filepath>directory.</li>
      <li id="edVar-home"><varname>${home}</varname> - The path (as URL) of the user home
        folder.</li>
      <li id="edVar-homeDir"><varname>${homeDir}</varname> - The path (as file path) of the user
        home folder.</li>
      <li id="edVar-pdu"><varname>${pdu}</varname> - Current project folder as URL. Usually the
        current folder selected in the Project View.</li>
      <li id="edVar-pd"><varname>${pd}</varname> - Current project folder as file path. Usually the
        current folder selected in the Project View.</li>
      <li id="edVar-pn"><varname>${pn}</varname> - Current project name.</li>
      <li id="edVar-cfdu"><varname>${cfdu}</varname> - Current file folder as URL, that is the path
        of the current edited document up to the name of the parent folder, represented as a
        URL.</li>
      <li id="edVar-cfd"><varname>${cfd}</varname> - Current file folder as file path, that is the
        path of the current edited document up to the name of the parent folder.</li>
      <li id="edVar-cfn"><varname>${cfn}</varname> - Current file name without extension and without
        parent folder. The current file is the one currently opened and selected.</li>
      <li id="edVar-cfne"><varname>${cfne}</varname> - Current file name with extension. The current
        file is the one currently opened and selected.</li>
      <li id="edvar-cf"><varname>${cf}</varname> - Current file as file path, that is the absolute
        file path of the current edited document.</li>
      <li id="edVar-cfu"><varname>${cfu}</varname> - The path of the current file as a URL. The
        current file is the one currently opened and selected.</li>
      <li id="edVar-af"><varname>${af}</varname> - The local file path of the ZIP archive that
        includes the current edited document.</li>
      <li id="edVar-afu"><varname>${afu}</varname> - The URL path of the ZIP archive that includes
        the current edited document.</li>
      <li id="edVar-afd"><varname>${afd}</varname> - The local directory path of the ZIP archive
        that includes the current edited document.</li>
      <li id="edVar-afdu"><varname>${afdu}</varname> - The URL path of the directory of the ZIP
        archive that includes the current edited document.</li>
      <li id="edVar-afn"><varname>${afn}</varname> - The file name (without parent directory and
        without file extension) of the zip archive that includes the current edited file.</li>
      <li id="edVar-afne"><varname>${afne}</varname> - The file name (with file extension, for
        example <filepath>.zip</filepath> or <filepath>.epub</filepath>, but without parent
        directory) of the zip archive that includes the current edited file.</li>
      <li id="edVar-currentFileURL"><varname>${currentFileURL}</varname> - Current file as URL, that
        is the absolute file path of the current edited document represented as URL.</li>
      <li id="edVar-ps"><varname>${ps}</varname> - Path separator, that is the separator which can
        be used on the current platform (Windows, OS X, Linux) between library files specified in
        the class path.</li>
      <li id="edvar-timestamp"><varname>${timeStamp}</varname> - Time stamp, that is the current
        time in Unix format. It can be used for example to save transformation results in different
        output files on each transform.</li>
      <li id="edVar-caret"><varname>${caret}</varname> - The position where the caret is inserted.
        This variable can be used in a code template, in <uicontrol>Author</uicontrol> operations,
        or in a selection plugin.</li>
      <li id="edvar-selection"><varname>${selection}</varname> - The current selected text content
        in the current edited document. This variable can be used in a code template, in
          <uicontrol>Author</uicontrol> operations, or in a selection plugin.</li>
      <li id="edVar-id"><ph id="id_editor_variable"><varname>${id}</varname> - Application-level
          unique identifier; a short sequence of 10-12 letters and digits which is not guaranteed to
          be universally unique</ph>.</li>
      <li id="edvar-uuid"><ph id="uuid_editor_variable"><varname>${uuid}</varname> - Universally
          unique identifier, a unique sequence of 32 hexadecimal digits generated by the Java <xref
            href="http://docs.oracle.com/javase/7/docs/api/java/util/UUID.html" format="html"
            scope="external">UUID</xref> class</ph>.</li>
      <li id="edvar-env"><varname>${env(VAR_NAME)}</varname> - Value of the <term>VAR_NAME</term>
        environment variable. The environment variables are managed by the operating system. If you
        are looking for Java System Properties, use the <varname>${system(var.name)}</varname>
        editor variable.</li>
      <li id="edVar-system"><varname id="java_system_properties">${system(var.name)}</varname> -
        Value of the <codeph>var.name</codeph> Java System Property. The Java system properties can
        be specified in the command line arguments of the Java runtime as
          <codeph>-Dvar.name=var.value</codeph>. If you are looking for operating system environment
        variables, use the <varname>${env(VAR_NAME)}</varname> editor variable instead.</li>
      <li id="edVar-ask"><varname>${ask('message', type, ('real_value1':'rendered_value1';
          'real_value2':'rendered_value2'; ...), 'default_value')}</varname> - To prompt for values
        at runtime, use the <i>ask('message', type, ('real_value1':'rendered_value1';
          'real_value2':'rendered_value2'; ...), 'default-value'')</i> editor variable. You can set
        the following parameters:<ul>
          <li><codeph>'message'</codeph> - The displayed message. Note the quotes that enclose the
            message.</li>
          <li><codeph>type</codeph> - Optional parameter, with one of the following values:<table
              frame="all" rowsep="1" colsep="1">
              <tgroup cols="2">
                <colspec colname="c1" colnum="1" colwidth="1*"/>
                <colspec colname="c2" colnum="2" colwidth="3.71*"/>
                <thead>
                  <row>
                    <entry>Parameter</entry>
                    <entry/>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry morerows="2"><codeph>url</codeph></entry>
                    <entry><b>Format:</b>
                      <codeph>${ask('message', url, 'default_value')}</codeph></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Input is considered a URL. <ph keyref="product"/>
                      checks that the provided URL is valid.</entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><ul>
                        <li><codeph>${ask('Input URL', url)}</codeph> - The displayed dialog box has
                          the name <codeph>Input URL</codeph>. The expected input type is URL.</li>
                        <li><codeph>${ask('Input URL', url, 'http://www.example.com')}</codeph> -
                          The displayed dialog box has the name <codeph>Input URL</codeph>. The
                          expected input type is URL. The input field displays the default value
                            <codeph>http://www.example.com</codeph>.</li>
                      </ul></entry>
                  </row>
                  <row>
                    <entry morerows="2"><codeph>password</codeph></entry>
                    <entry><b>Format</b>: <varname>${ask('message', password,
                      'default')}</varname></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> The input is hidden with bullet characters.</entry>
                  </row>
                  <row>
                    <entry><b>Example:</b>
                      <ul>
                        <li><codeph>${ask('Input password', password)}</codeph> - The displayed
                          dialog box has the name <codeph>'Input password'</codeph> and the input is
                          hidden with bullet symbols.</li>
                        <li><codeph>${ask('Input password', password, 'abcd')}</codeph> - The
                          displayed dialog box has the name <codeph>'Input password'</codeph> and
                          the input hidden with bullet symbols. The input field already contains the
                          default <userinput>abcd</userinput> value. </li>
                      </ul></entry>
                  </row>
                  <row>
                    <entry morerows="2"><codeph>generic</codeph></entry>
                    <entry><b>Format</b>: <varname>${ask('message', generic,
                      'default')}</varname></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> The input is considered to be generic text that
                      requires no special handling.</entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><ul>
                        <li><codeph>${ask('Hello world!')}</codeph> - The dialog box has a
                            <codeph>Hello world!</codeph> message displayed.</li>
                        <li><codeph>${ask('Hello world!', generic, 'Hello again!')}</codeph> - The
                          dialog box has a <codeph>Hello world!</codeph> message displayed and the
                          value displayed in the input box is <codeph>'Hello again!'</codeph>.</li>
                      </ul></entry>
                  </row>
                  <row>
                    <entry morerows="2"><codeph>relative_url</codeph></entry>
                    <entry><b>Format:</b>
                      <codeph>${ask('message', relative_url, 'default')}</codeph></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Input is considered a URL. <ph keyref="product"/>
                      tries to make the URL relative to that of the document you are
                        editing.<note>You can use the <codeph>$ask</codeph> editor variable in file
                        templates, in which case, <ph keyref="product"/> transforms it into an
                        absolute URL.</note></entry>
                  </row>
                  <row>
                    <entry>
                      <p><b>Example:</b></p>
                      <p>
                        <ul>
                          <li><varname>${ask('File location', relative_url,
                              'C:/example.txt')}</varname> - The dialog box has the name
                              <codeph>'File location'</codeph>. The URL inserted in the input box is
                            made relative to the current edited document location.</li>
                        </ul>
                      </p>
                    </entry>
                  </row>
                  <row>
                    <entry morerows="2"><codeph>combobox</codeph></entry>
                    <entry><b>Format:</b>
                      <codeph>${ask('message', combobox,
                        ('real_value1':'rendered_value1';...;'real_valueN':'rendered_valueN'),
                        'default')}</codeph></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Displays a dialog box that offers a drop-down list.
                      The drop-down list is populated with the given <codeph>rendered_value</codeph>
                      values. Choosing such a value will return its associated value
                        (<codeph>real_value</codeph>).</entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><p>
                        <ul>
                          <li><codeph>${ask('Operating System', combobox, ('win':'Microsoft
                              Windows';'osx':'Mac OS X';'lnx':'Linux/UNIX'), 'osx')}</codeph> - The
                            dialog box has the name <codeph>'Operating System'</codeph>. The
                            drop-down list displays the three given operating systems. The
                            associated value will be returned based upon your selection. <note>In
                              this example <userinput>Mac OS X</userinput> is the default selected
                              value and if selected it would return <codeph>osx</codeph> for the
                              output.</note></li>
                        </ul>
                      </p></entry>
                  </row>
                  <row>
                    <entry morerows="2"><codeph>editable_combobox</codeph></entry>
                    <entry><b>Format:</b>
                      <codeph>${ask('message', editable_combobox,
                        ('real_value1':'rendered_value1';...;'real_valueN':'rendered_valueN'),
                        'default')}</codeph></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Displays a dialog box that offers a drop-down list
                      with editable elements. The drop-down list is populated with the given
                        <codeph>rendered_value</codeph> values. Choosing such a value will return
                      its associated real value (<codeph>real_value</codeph>) or the value inserted
                      when you edit a list entry.</entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><p>
                        <ul>
                          <li><codeph>${ask('Operating System', editable_combobox, ('win':'Microsoft
                              Windows';'osx':'Mac OS X';'lnx':'Linux/UNIX'), 'osx')}</codeph> - The
                            dialog box has the name <codeph>'Operating System'</codeph>. The
                            drop-down list displays the three given operating systems and also
                            allows you to edit the entry. The associated value will be returned
                            based upon your selection or the text you input.</li>
                        </ul>
                      </p></entry>
                  </row>
                  <row>
                    <entry morerows="2"><codeph>radio</codeph></entry>
                    <entry><b>Format:</b>
                      <codeph>${ask('message', radio,
                        ('real_value1':'rendered_value1';...;'real_valueN':'rendered_valueN'),
                        'default')}</codeph></entry>
                  </row>
                  <row>
                    <entry><b>Description:</b> Displays a dialog box that offers a series of radio
                      buttons. Each radio button displays a <codeph>'rendered_value</codeph> and
                      will return an associated <codeph>real_value</codeph>.</entry>
                  </row>
                  <row>
                    <entry><b>Example:</b><ul>
                        <li><codeph>${ask('Operating System', radio, ('win':'Microsoft
                            Windows';'osx':'Mac OS X';'lnx':'Linux/UNIX'), 'osx')}</codeph> - The
                          dialog box has the name <codeph>'Operating System'</codeph>. The radio
                          button group allows you to choose between the three operating
                            systems.<note>In this example <userinput>Mac OS X</userinput> is the
                            default selected value and if selected it would return
                              <codeph>osx</codeph> for the output.</note></li>
                      </ul></entry>
                  </row>
                </tbody>
              </tgroup>
            </table></li>
          <li><codeph>'default-value'</codeph> - optional parameter. Provides a default value.</li>
        </ul></li>
      <li id="edVar-date"><varname>${date(pattern)}</varname> - Current date. The allowed patterns
        are equivalent to the ones in the <xref
          href="http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"
          format="html" scope="external">Java SimpleDateFormat class</xref>. <b>Example:</b>
        <codeph>yyyy-MM-dd</codeph>;<note>This editor variable supports both the
            <parmname>xs:date</parmname> and <parmname>xs:datetime</parmname> parameters. For
          details about <parmname>xs:date</parmname>, go to <xref
            href="http://www.w3.org/TR/xmlschema-2/#date" format="html" scope="external"
            >http://www.w3.org/TR/xmlschema-2/#date</xref>. For details about
            <parmname>xs:datetime</parmname>, go to <xref
            href="http://www.w3.org/TR/xmlschema-2/#dateTime" format="html" scope="external"
            >http://www.w3.org/TR/xmlschema-2/#dateTime</xref>.</note></li>
      <li id="edVar-dbgXML"><varname>${dbgXML}</varname> - The local file path to the XML document
        which is current selected in the Debugger source combo box (for tools started from the
        XSLT/XQuery Debugger).</li>
      <li id="edVar-dbgXSL"><varname>${dbgXSL}</varname> - The local file path to the XSL/XQuery
        document which is current selected in the Debugger stylesheet combo box (for tools started
        from the XSLT/XQuery Debugger).</li>
      <li id="edVar-tsf"><varname>${tsf}</varname> - The transformation result file path. If the
        current opened file has an associated scenario which specifies a transformation output file,
        this variable expands to it.</li>
      <li id="edVar-dsu"><varname>${dsu}</varname> - The path of the detected schema as an URL for
        the current validated XML document.</li>
      <li id="edVar-ds"><varname>${ds}</varname> - The path of the detected schema as a local file
        path for the current validated XML document.</li>
      <li id="edVar_cp"><varname>${cp}</varname> - Current page number. Used to display the current
        page number on each printed page in the <b>Editor / Print</b> Preferences page.</li>
      <li id="edVar_tp"><varname>${tp}</varname> - Total number of pages in the document. Used
        to display the total number of pages on each printed page in the <b>Editor / Print</b>
        Preferences page.</li>
      <li id="edVar-xpath"><varname>${xpath_eval(expression)}</varname> - Evaluates an XPath 3.0
        expression. Depending on the context, the expression can be:<ul id="ul_bby_sss_wn">
          <li><term>static</term>, when executed in a non-XML context. For example, you can use such
            static expressions to perform string operations on other editor variables for composing
            the name of the output file in a transformation scenario's <b>Output</b>
                tab.<p><b>Example:</b></p><p>
              <codeblock>${xpath_eval(upper-case(substring('${cfn}', 1, 4)))}</codeblock>
            </p></li>
          <li><term>dynamic</term>, when executed in an XML context. For example, you can use such
            dynamic expression in a code template or as a value of an author operation's
                parameter.<p><b>Example:</b></p><p>
              <codeblock>${ask('Set new ID attribute', generic, '${xpath_eval(@id)}')}</codeblock>
            </p></li>
        </ul></li>
      <li><varname>${i18n(key)}</varname> - Editor variable used only at document type/framework
        level to allow translating names and descriptions of Author actions in multiple actions.
        More details here:<xref href="localizing_frameworks.dita"/></li>
    </ul>
  </body>
  <related-links product="author  editor">
    <link href="code-templates.dita#code-templates"/>
    <link href="../concepts/selection-plugin.dita#selection-plugin"/>
    <link href="installing-and-updating-add-ons.dita#installing-and-updating-add-ons"/>
  </related-links>
</topic>
