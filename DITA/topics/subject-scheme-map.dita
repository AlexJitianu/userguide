<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="subject-scheme-map">
  <title>Profiling with a Subject Scheme Map</title>
  <body>
    <p>A subject scheme map allows you to create custom profiling values and to manage the profiling
      attribute values used in the DITA topics without having to write a DITA specialization.</p>
    <p>Subject scheme maps use key definitions to define a collection of profiling values. A map
      that uses the set of profiling values must reference at its highest level the subject scheme
      map in which the profiling values are defined, for
      example:<codeblock outputclass="language-xml">&lt;topicref href="test.ditamap" format="ditamap" type="subjectScheme"/></codeblock></p>
    <p>A profiled value should be a short and readable keyword that identifies a metadata attribute.
      For example, the <codeph>audience</codeph> metadata attribute may take a value that identifies
      the user group associated with a particular content unit. Typical user values for a
      medical-equipment product line might include <codeph>therapist</codeph>,
        <codeph>oncologist</codeph>, <codeph>physicist</codeph>, <codeph>radiologist</codeph>,
        <codeph>surgeon</codeph>, and so on. A subject scheme map can define a list of these
      audience values.</p>
    <p>The following is an example of content from a subject scheme:</p>
    <codeblock outputclass="language-xml">&lt;subjectScheme>
  &lt;!-- Pull in a scheme that defines audience user values -->
  &lt;subjectdef keys="users">
    &lt;subjectdef keys="therapist"/>
    &lt;subjectdef keys="oncologist"/>
    &lt;subjectdef keys="physicist"/>
    &lt;subjectdef keys="radiologist"/>
    &lt;subjectdef keys="surgeon">
      &lt;subjectdef keys="neuro-surgeon">
        &lt;subjectdef keys="plastic-surgeon"/>
      &lt;/subjectdef>
    &lt;/subjectdef>
  &lt;/subjectdef>
  &lt;!-- Define an enumeration of the audience attribute, equal to
       each value in the users subject. This makes the following values
       valid for the audience attribute: therapist, oncologist, physicist, radiologist -->
  &lt;enumerationdef>
    &lt;attributedef name="audience"/>
    &lt;subjectdef keyref="users"/>
  &lt;/enumerationdef>
&lt;/subjectScheme></codeblock>
    <p>When you edit a DITA topic in the <uicontrol>Text</uicontrol> or
        <uicontrol>Author</uicontrol> mode, <ph keyref="product"/> collects all the profiling values
      from the Subject Scheme Map that is referenced in the map that is currently opened in the
        <xref href="dita-maps-manager.dita">DITA Maps Manager</xref>. The values of profiling
      attribute defined in a Subject Scheme Map are available in the <uicontrol>Edit Profiling
        Attribute</uicontrol> dialog box regardless of their mapping the <uicontrol>Conditional
        Text</uicontrol> preferences page.</p>
    <example>In the example above, the values <codeph>therapist</codeph>,
        <codeph>oncologist</codeph>, <codeph>physicist</codeph>, and so on, are displayed in <xref
        href="streamline-with-content-completion.dita#streamline-with-content-completion"
        format="dita">the content completion window</xref> as values for the
        <codeph>audience</codeph> attribute.</example>
    <p>Now let us consider we have the following fragment in a topic:</p>
    <codeblock outputclass="language-xml">&lt;p audience="neuro-surgeon">Some text.. &lt;/p></codeblock>
    <p>When you define a DITAVAL filter, you can, for instance, exclude anything that is profiled as
        <codeph>surgeon</codeph>:</p>
    <codeblock outputclass="language-xml">&lt;val>
     &lt;prop action="exclude" att="audience" val="surgeon"/>
&lt;/val></codeblock>
    <p>If you then transform the main DITA Map specifying the DITAVAL filter file in the
      transformation scenario, the <codeph>p</codeph> element should be excluded from the output.
      Thus, excluding the <codeph>surgeon</codeph> audience also excludes
        <codeph>neuro-surgeon</codeph> and <codeph>plastic-surgeon</codeph> from the output. More
      details about how hierarchical filtering and Subject Scheme Maps should work are found in the
      following specification:<xref
        href="http://docs.oasis-open.org/dita/v1.2/os/spec/langref/subjectScheme.html#subjectSchemehttp://docs.oasis-open.org/dita/v1.2/os/spec/langref/subjectScheme.html%23subjectScheme"
        format="html" scope="external"/></p>
  </body>
  <related-links>
    <link href="http://www.oxygenxml.com/demo/DITA_Subject_Scheme.html" format="html"
      scope="external"/>
    <link
      href="http://docs.oasis-open.org/dita/v1.2/os/spec/langref/subjectScheme.html#subjectScheme"
      format="html" scope="external"/>
  </related-links>
</topic>
